# 自定义指标替换
c1_explain_start_zh = """
    你是一个文本润色大师， 接下来我将会给你一个问题和自定义指标，
    请你按如下规则进行问题的改写和润色，并且一定不要犯错误。
"""
c1_explain_end_zh = """
    好的，请告诉我问题和自定义指标。
"""

c1_explain_tip1_zh = """
    Tips：
        1. 如果问题涉及自定义指标，请将自定义指标的内容替换到问题当中；
        2. 在替换完成后，请务必保证语义不变，结构完整；
        
    ### 示例1：
    ## 问题：
        # 最近6个月保定基地的产量完成率分别是多少，哪个月完成率最低？
    ## 自定义指标：
        # 产量完成率=产量/产量计划
    ## 润色后的问题：
        # 最近6个月保定基地的产量完成率（产量/产量计划）分别是多少，哪个月完成率（产量/产量计划）最低？
        
    ### 示例2：
    ## 问题：
        # 本月H6国潮版国内终端库存量是多少？
    ## 自定义指标：
        # 终端库存即为全国各个地区的经销商库存
    ## 润色后的问题：
        # 本月H6国潮版国内各地区的经销商库存共有是多少？ 
"""
c1_explain_question_zh = """
    ## 问题：
        # {question}
    ## 自定义指标：
        # {indicators}
    ## 润色后的问题：
"""


# SQL生成

c2_2sql_start_zh = """
你是一个非常卓越的SQLite写手， 接下来我将会给你一些建议和示例，
我需要你将这些建立和示例记录下来，并且不要犯错误。
"""

c2_2sql_start_ans_zh = """
当然，我会尽力帮助你。请告诉我你的建议和示例，我会记录下来并确保不犯错误。
"""

c2_2sql_tip1_zh = """
小贴士1：
1.查询涉及count、all等关键字时，请使用SUM（）。
2.当查询涉及日期时间范围内的计数时，请不要使用strftime（）。  
3.当查询涉及关键字now或今天时，请使用now（）或字符串“now”。 
不要返回对上述建议的任何剖析，只需要返回好的，我记住了。   
"""

c2_2sql_tip2_zh = """
小贴士2：
1. 请不要使用"IN"、"OR"、"JOIN" 等可能会产生额外结果的关键字， 请使用"INTERSEC"、"EXCEPT"代替，同时请记住当有需要的时候使用"DISTINCT"、"LIMIT"。
2. 请使用提供的列名进行SQL生成，一定不要使用不存在的列名进行生成。
3. 在生成的SQL中请严格保持字段的中英文，不要使用英文替代中文。
4. 在生成的SQL当中，请严格按照字段和表名的关系，一定不要出现错误引用。
5. 如果涉及到本月、今天等描述时间的词汇，请在所提供字段中寻找与时间词汇相应的字段进行SQL生成。
6. 请参考下述示例的格式，但是请严格按照问题的语义进行SQL生成，不要受到示例的字段、值的影响。

不要返回对上述建议的任何剖析，只需要返回好的，我记住了。   
"""

c2_2sql_tip_ans_zh = """
好的，我已经记住了。
"""

c2_2sql_example_zh = """
    {TableExample}
"""

c2_2sql_question_zh = """
### 仅完成SQLite SQL生成
### 不做任何的解释，并且不要选择查询中未明确请求的额外列和不存在的列，
### 当查询涉及到除法计算，请使用CAST转成FLOAT类型再相除。
### 请返回完整的以SELECT开头的SQL，不要做任何有关SQL的解释

### SQLite表和其属性：
{TableAttr}

### 问题：
# {Question}
                      
SELECT
"""

# SQL纠错

c3_correction_start_zh = """
### 你是一个SQLite修改大师，接下来我将把（问题）、（执行错误的SQL）、（表和属性）、（执行错误原因）给你，请你按如下要求修改SQL。
"""

c3_correction_start_ans_zh = """
# 请提供您的（问题）、（执行错误的SQL）、（表和属性）以及（执行错误原因），我将为您修改SQL查询。
"""

c3_correction_tip1_zh = """
小贴士1：
## 1. 请你修正SQL中的语法错误；
## 2. 请你将该SQL转换成SQLite可执行的SQL语法；
## 3. 在比较年份等条件时，请使用CASE函数进行统一类型转换，不要因格式不同而导致匹配不到数据。
## 4. SQL的表和字段的引用一定要严格参照表和属性的名称及引用关系。      
"""

c3_correction_question_zh = """
### SQLite表和其属性：
# {TableName}

### 问题：
# {Question} 

### 执行错误的SQL：
# {Sql}
            
### 错误原因：
# {Error}                   

### 被修正的SQL：
SELECT

请你结合错误原因对SQL进行改写,只返回SQL,不需要返回修改说明和分析过程
"""

c3_col_val_start_zh = """
    # 你是一个SQLite语法修改大师，接下来我将把（问题）、（SQL）、（相关的字段及值）给你，请你按如下要求修改SQL。
"""

c3_col_val_tip1_zh = """
    ## 你将遵循下述规则进行SQL替换： \
    1. 结合字段及其值与问题，让SQL生成的更贴合问题、匹配的字段值更精确； \
    2. 若是时间范围查询，请根据问题尽量使用strftime等时间格式转换 \
    3. 涉及到对某个字段求总量，请使用SUM进行求和 \
    4. 若给定的（相关的字段及值）中的值出现在问题中，则以覆盖条件的形式替换
    5. 只需要修改WHERE子句的条件部分，其他的内容请不要改写
    6. 进行时间格式的判断时，请将时间格式转换成字符串判断
    7. 遇到除法时，请使用CAST保留小数部分
"""

c3_col_val_exp_zh = """
    ### 示例1：
        ## 问题：帮我查询北京市的汽车总销量
        ## 字段及其值：{"省份": "北京", "城市": "北京市"}
        ## SQL: SELECT SUM(销量) from df0 WHERE "省份"="北京市"
        ## 修改后的SQL：SELECT SUM(销量) from df0 WHERE "城市"="北京市"
        ## 分析：根据问题可知需要查询的是北京市，而北京市对应的是城市而不是省份。
        
        ### 示例2：
        ## 问题：帮我查询2023年11月北京的哈佛猛龙的总销量
        ## 字段及其值：{"省份": "北京", "城市": "北京市", "品牌": "哈弗", "车型": "哈弗猛龙"}
        ## SQL: SELECT SUM(销量) from df0 WHERE "城市"="北京" and "品牌"="哈弗猛龙" and 销售日期<"2023-11-30" and 销售日期>"2023-11-01"
        ## 修改后的SQL：SELECT SUM(销量) from df0 WHERE "城市"="北京市" and "车型"="哈弗猛龙" and strftime('%Y-%m', 销售日期) = '2023-11';
        ## 分析：根据问题可知需要查询的是北京和哈弗猛龙，由字段及其值可知，而北京市对应的是城市而不是省份，哈弗猛龙对应的是车型而不是品牌, 并改用格式化时间对时间范围查找更精确
"""

c3_col_val_qa_zh = """
        在返回的结果当中，请不要返回任何解释，仅仅返回SQL语句部分

        ## 问题：{Question}
        ## 字段及其值：{Col_Value_Map}
        ## SQL: {Sql}

        SELECT
"""






